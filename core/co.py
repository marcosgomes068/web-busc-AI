"""
M√≥dulo de Integra√ß√£o com Cohere API
===================================

Este m√≥dulo gerencia a integra√ß√£o com a API Cohere para criar agentes
de IA especializados em diferentes tarefas de an√°lise de conte√∫do.

Funcionalidades:
- Configura√ß√£o segura de API keys
- Factory de agentes especializados
- Gest√£o de chamadas para API Cohere
- Fallback para modelos default quando necess√°rio

Depend√™ncias:
- cohere: Cliente oficial da API Cohere
- os: Para acessar vari√°veis de ambiente

Autor: Marco
Data: Agosto 2025
"""

import os
from typing import Callable, Optional

try:
    from .config import SystemConfig
except ImportError:
    # Fallback se config n√£o estiver dispon√≠vel
    class SystemConfig:
        COHERE_DEFAULT_TEMPERATURE = 0.6
        COHERE_MAX_TOKENS_MEDIUM = 500
        @classmethod
        def get_cohere_config(cls, content_size):
            return {'max_tokens': 500, 'temperature': 0.6}
        @classmethod
        def get_agent_config(cls, agent_type):
            return {'max_tokens': 500, 'temperature': 0.6}


def get_api_key() -> str:
    """
    Obt√©m a chave da API Cohere das vari√°veis de ambiente ou arquivo .env.
    
    Returns:
        str: Chave da API Cohere
        
    Raises:
        RuntimeError: Se a chave da API n√£o for encontrada
        
    Note:
        Busca primeiro nas vari√°veis de ambiente, depois no arquivo .env
    """
    # Primeira tentativa: vari√°vel de ambiente
    api_key = os.getenv("COHERE_API_KEY")
    
    if not api_key:
        # Segunda tentativa: arquivo .env no diret√≥rio do projeto
        env_path = os.path.join(os.path.dirname(__file__), "..", ".env")
        env_path = os.path.abspath(env_path)
        
        if os.path.exists(env_path):
            try:
                with open(env_path, "r", encoding="utf-8") as file:
                    for line in file:
                        line = line.strip()
                        if line.startswith("COHERE_API_KEY="):
                            api_key = line.split("=", 1)[1].strip()
                            # Define a vari√°vel de ambiente para uso futuro
                            os.environ["COHERE_API_KEY"] = api_key
                            break
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao ler arquivo .env: {e}")
    
    if not api_key:
        raise RuntimeError(
            "‚ùå COHERE_API_KEY n√£o encontrada!\n"
            "üí° Configure a chave da API:\n"
            "   1. Como vari√°vel de ambiente: COHERE_API_KEY=sua_chave\n"
            "   2. No arquivo .env: COHERE_API_KEY=sua_chave"
        )
    
    return api_key


def create_agent(system_prompt: str, max_tokens: int = 500) -> Callable[[str], str]:
    """
    Factory para criar agentes de IA especializados usando Cohere.
    
    Args:
        system_prompt (str): Prompt que define o comportamento do agente
        max_tokens (int, optional): N√∫mero m√°ximo de tokens na resposta. Default: 500
        
    Returns:
        Callable[[str], str]: Fun√ß√£o agente que processa mensagens
        
    Examples:
        >>> agent = create_agent("Voc√™ √© um resumidor especialista.")
        >>> summary = agent("Texto para resumir...")
        >>> print(summary)
        
    Note:
        Usa configura√ß√£o otimizada para textos longos e respostas estruturadas.
        Implementa sistema de fallback inteligente para diferentes tamanhos.
    """
    def agent(user_prompt: str) -> str:
        """
        Processa uma mensagem usando o agente configurado.
        
        Args:
            user_prompt (str): Mensagem do usu√°rio para processar
            
        Returns:
            str: Resposta gerada pelo agente
        """
        try:
            # Importa cohere dinamicamente para evitar depend√™ncias desnecess√°rias
            import cohere
            
            # Inicializa cliente com chave da API
            client = cohere.Client(get_api_key())
            
            # Combina prompt do sistema com entrada do usu√°rio de forma otimizada
            complete_message = f"{system_prompt}\n\n---\n\nTEXTO PARA PROCESSAR:\n{user_prompt}\n\n---\n\nRESPOSTA:"
            
            # Determina configura√ß√£o baseada no tamanho do conte√∫do
            content_length = len(user_prompt)
            cohere_config = SystemConfig.get_cohere_config(content_length)
            
            # Usa configura√ß√£o otimizada ou fallback
            tokens = cohere_config.get('max_tokens', max_tokens)
            temperature = cohere_config.get('temperature', SystemConfig.COHERE_DEFAULT_TEMPERATURE)
            
            # Ajusta tokens se especificado
            if max_tokens != 500:  # Se n√£o for o padr√£o, usa o especificado
                tokens = max_tokens
            
            # Gera resposta usando configura√ß√£o otimizada
            response = client.generate(
                prompt=complete_message,
                max_tokens=tokens,
                temperature=temperature,
                k=cohere_config.get('k', 0),
                p=cohere_config.get('p', 0.9),
                frequency_penalty=cohere_config.get('frequency_penalty', 0.1),
                presence_penalty=cohere_config.get('presence_penalty', 0.1)
            )
            
            return response.generations[0].text.strip()
            
        except ImportError:
            return "‚ùå Erro: Biblioteca 'cohere' n√£o instalada. Execute: pip install cohere"
            
        except Exception as error:
            error_msg = str(error).lower()
            
            # Fallback inteligente para diferentes tipos de erro
            if "token" in error_msg or "length" in error_msg:
                try:
                    print("üîÑ Tentando com menos tokens devido a limite excedido...")
                    fallback_tokens = min(300, max_tokens // 2)
                    
                    # Trunca conte√∫do se muito longo
                    if len(user_prompt) > 2000:
                        truncated_prompt = user_prompt[:2000] + "\n\n[CONTE√öDO TRUNCADO - AN√ÅLISE PARCIAL]"
                    else:
                        truncated_prompt = user_prompt
                    
                    complete_message = f"{system_prompt}\n\n---\n\nTEXTO PARA PROCESSAR:\n{truncated_prompt}\n\n---\n\nRESPOSTA:"
                    
                    response = client.generate(
                        prompt=complete_message,
                        max_tokens=fallback_tokens,
                        temperature=0.6
                    )
                    return response.generations[0].text.strip()
                    
                except Exception as e2:
                    return f"‚ùå Erro persistente ap√≥s fallback: {str(e2)}"
            
            return f"‚ùå Erro Cohere: {str(error)}"
    
    return agent


def create_specialized_agents() -> dict:
    """
    Cria um conjunto de agentes especializados para an√°lise de conte√∫do.
    
    Returns:
        dict: Dicion√°rio com agentes especializados pr√©-configurados
        
    Agents Available:
        - resumidor: Resume conte√∫do de forma concisa e estruturada
        - analista: Faz an√°lise detalhada e identifica insights
        - organizador: Estrutura e organiza informa√ß√µes hierarquicamente
        - sintetizador: Combina m√∫ltiplas fontes em s√≠ntese coerente
    """
    agents = {
        'resumidor': create_agent(
            "Voc√™ √© um ESPECIALISTA EM RESUMOS T√âCNICOS. Sua miss√£o √© extrair os pontos mais importantes do texto fornecido.\n\n"
            "DIRETRIZES:\n"
            "‚Ä¢ Foque nos conceitos centrais e informa√ß√µes-chave\n"
            "‚Ä¢ Use linguagem clara, objetiva e t√©cnica\n"
            "‚Ä¢ Mantenha a estrutura l√≥gica do conte√∫do original\n"
            "‚Ä¢ Elimine redund√¢ncias e informa√ß√µes secund√°rias\n"
            "‚Ä¢ Use portugu√™s brasileiro formal\n"
            "‚Ä¢ Limite-se aos fatos apresentados no texto\n\n"
            "FORMATO DE RESPOSTA:\n"
            "- Pontos principais em bullets\n"
            "- M√°ximo 5-7 pontos essenciais\n"
            "- Cada ponto deve ser conciso mas completo",
            max_tokens=600
        ),
        
        'analista': create_agent(
            "Voc√™ √© um ANALISTA S√äNIOR DE CONTE√öDO com expertise em identificar insights e padr√µes.\n\n"
            "SUAS RESPONSABILIDADES:\n"
            "‚Ä¢ Identificar tend√™ncias e padr√µes importantes\n"
            "‚Ä¢ Extrair insights t√©cnicos e pr√°ticos\n"
            "‚Ä¢ Conectar conceitos e rela√ß√µes entre temas\n"
            "‚Ä¢ Destacar informa√ß√µes cr√≠ticas para tomada de decis√£o\n"
            "‚Ä¢ Avaliar qualidade e relev√¢ncia das informa√ß√µes\n"
            "‚Ä¢ Usar terminologia t√©cnica apropriada\n\n"
            "ESTRUTURA DA AN√ÅLISE:\n"
            "1. INSIGHTS PRINCIPAIS (3-5 pontos)\n"
            "2. TEND√äNCIAS IDENTIFICADAS\n"
            "3. IMPLICA√á√ïES PR√ÅTICAS\n"
            "4. PONTOS DE ATEN√á√ÉO\n\n"
            "Use portugu√™s brasileiro e seja detalhado mas objetivo.",
            max_tokens=800
        ),
        
        'organizador': create_agent(
            "Voc√™ √© um ESPECIALISTA EM ORGANIZA√á√ÉO DE INFORMA√á√ïES e estrutura√ß√£o de conte√∫do.\n\n"
            "OBJETIVOS:\n"
            "‚Ä¢ Criar estrutura hier√°rquica clara e l√≥gica\n"
            "‚Ä¢ Categorizar informa√ß√µes por relev√¢ncia e tema\n"
            "‚Ä¢ Usar formata√ß√£o visual para facilitar leitura\n"
            "‚Ä¢ Estabelecer rela√ß√µes entre diferentes se√ß√µes\n"
            "‚Ä¢ Criar √≠ndice mental do conte√∫do\n\n"
            "FORMATA√á√ÉO OBRIGAT√ìRIA:\n"
            "```\n"
            "# T√çTULO PRINCIPAL\n"
            "## Se√ß√£o 1\n"
            "### Subse√ß√£o 1.1\n"
            "‚Ä¢ Ponto importante\n"
            "‚Ä¢ Outro ponto\n"
            "\n"
            "## Se√ß√£o 2\n"
            "### Subse√ß√£o 2.1\n"
            "...\n"
            "```\n\n"
            "Use numera√ß√£o, bullets e hierarquia visual clara.",
            max_tokens=700
        ),
        
        'sintetizador': create_agent(
            "Voc√™ √© o SINTETIZADOR MASTER - respons√°vel pela s√≠ntese final e integra√ß√£o de m√∫ltiplas an√°lises.\n\n"
            "MISS√ÉO CR√çTICA:\n"
            "‚Ä¢ Integrar resumos, an√°lises e organiza√ß√µes em documento √∫nico\n"
            "‚Ä¢ Eliminar redund√¢ncias entre diferentes fontes\n"
            "‚Ä¢ Criar vis√£o hol√≠stica e coerente do tema\n"
            "‚Ä¢ Destacar conclus√µes e recomenda√ß√µes principais\n"
            "‚Ä¢ Produzir documento final de alta qualidade\n\n"
            "ESTRUTURA OBRIGAT√ìRIA DA S√çNTESE:\n"
            "# S√çNTESE EXECUTIVA\n"
            "## üéØ Resumo Geral\n"
            "## üîç Principais Descobertas\n"
            "## üìä Insights Estrat√©gicos\n"
            "## üí° Recomenda√ß√µes\n"
            "## üîó Conex√µes Entre Temas\n"
            "## ‚ö° Conclus√µes Finais\n\n"
            "QUALIDADE EXIGIDA:\n"
            "‚Ä¢ Linguagem profissional e t√©cnica\n"
            "‚Ä¢ Portugu√™s brasileiro formal\n"
            "‚Ä¢ Estrutura visual clara com emojis\n"
            "‚Ä¢ M√°xima coer√™ncia e fluidez\n"
            "‚Ä¢ Foco em valor agregado",
            max_tokens=1200
        )
    }
    
    return agents


def test_api_connection() -> bool:
    """
    Testa a conex√£o com a API Cohere.
    
    Returns:
        bool: True se a conex√£o foi bem-sucedida, False caso contr√°rio
    """
    try:
        # Cria um agente simples para teste
        test_agent = create_agent("Responda apenas 'Teste OK'", max_tokens=50)
        response = test_agent("teste de conex√£o")
        
        if "ok" in response.lower() or "teste" in response.lower():
            print("‚úÖ Conex√£o com Cohere API: Sucesso")
            return True
        else:
            print(f"‚ö†Ô∏è Conex√£o estabelecida, resposta: {response}")
            return True  # Considera sucesso mesmo com resposta diferente
            
    except Exception as e:
        print(f"‚ùå Erro na conex√£o com Cohere API: {e}")
        return False


# Alias para compatibilidade com c√≥digo existente
criar_agente = create_agent


if __name__ == "__main__":
    # Teste de conex√£o quando executado diretamente
    print("üß™ Testando integra√ß√£o com Cohere API...")
    test_api_connection()
