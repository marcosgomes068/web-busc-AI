"""
Sistema Inteligente de Coleta e An√°lise de Conte√∫do Web
======================================================

Este m√≥dulo principal coordena todo o fluxo de coleta de dados da web,
extra√ß√£o de conte√∫do e an√°lise usando m√∫ltiplos agentes de IA.

Funcionalidades:
- Gera√ß√£o autom√°tica de termos de busca
- Coleta de conte√∫do de p√°ginas web
- An√°lise inteligente usando m√∫ltiplos agentes especializados
- Gera√ß√£o de relat√≥rios e s√≠nteses

Autor: Marco
Data: Agosto 2025
"""

import re
import os
from typing import Tuple, List, Dict, Any
from utils.console import (
    print_header, print_section, print_step, print_result, 
    log, RichProgress, confirm_action, prompt_input, console
)

from core.web_search import collect_web_pages, download_and_save_content
from core.proces_response import create_multi_agent_summary


def normalize_filename(topic: str) -> str:
    """
    Normaliza um tema para criar um nome de arquivo v√°lido.
    
    Args:
        topic (str): Tema de busca original
        
    Returns:
        str: Nome de arquivo normalizado e seguro
        
    Examples:
        >>> normalize_filename("Python & Machine Learning")
        'python__machine_learning'
    """
    # Remove caracteres especiais n√£o permitidos em nomes de arquivo
    clean_name = re.sub(r'[<>:"/\\|?*]', '', topic)
    
    # Substitui espa√ßos por underscores
    clean_name = re.sub(r'\s+', '_', clean_name.strip())
    
    # Converte para min√∫sculas
    clean_name = clean_name.lower()
    
    # Limita o tamanho para evitar problemas no sistema de arquivos
    return clean_name[:50]


def process_search_query(search_query: str) -> Tuple[List[str], Dict[str, List[str]], Dict[str, Any]]:
    """
    Processa uma consulta de busca completa: gera√ß√£o de termos, coleta e an√°lise.
    
    Args:
        search_query (str): Consulta de busca do usu√°rio
        
    Returns:
        Tuple contendo:
        - List[str]: Termos de busca extra√≠dos
        - Dict[str, List[str]]: URLs coletadas por termo
        - Dict[str, Any]: Dados completos salvos
    """
    print(f"üîç Iniciando busca para: {search_query}")
    
    # Gera nome de arquivo baseado no tema
    file_base = normalize_filename(search_query)
    data_file = f"dados_{file_base}.json"
    
    log.info(f"Arquivo ser√° salvo como: {data_file}")
    
    # Etapa 1: Gera termos de busca usando IA
    print_section("GERANDO TERMOS DE BUSCA COM IA")
    
    search_terms = _generate_search_terms(search_query)
    
    # Etapa 2: Coleta p√°ginas da web
    print_section("COLETANDO P√ÅGINAS DA WEB")
    
    collected_urls = collect_web_pages(search_terms)
    
    # Etapa 3: Extrai conte√∫do otimizado
    print_section("EXTRAINDO CONTE√öDO DE TEXTO")
    
    complete_data = download_and_save_content(collected_urls, data_file)
    
    # Etapa 4: An√°lise com m√∫ltiplos agentes
    print_section("PROCESSANDO COM M√öLTIPLOS AGENTES IA")
    
    create_multi_agent_summary(data_file)
    
    return search_terms, collected_urls, complete_data


def _generate_search_terms(search_query: str) -> List[str]:
    """
    Gera termos de busca usando IA baseado na consulta do usu√°rio.
    
    Args:
        search_query (str): Consulta original do usu√°rio
        
    Returns:
        List[str]: Lista de termos de busca gerados
    """
    from core.co import create_agent
    
    # Cria agente especializado em gera√ß√£o de termos de busca
    log.step("Criando gerador de termos com IA")
    term_generator = create_agent(
        "ESPECIALISTA EM ESTRAT√âGIA DE BUSCA EDUCACIONAL\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n"
        "MISS√ÉO: Gerar termos de busca estrat√©gicos para coleta de conte√∫do educacional de alta qualidade.\n\n"
        "CRIT√âRIOS OBRIGAT√ìRIOS:\n"
        "‚Ä¢ Foque APENAS em recursos educacionais confi√°veis\n"
        "‚Ä¢ EVITE sites comerciais, marketplaces ou p√°ginas pagas\n"
        "‚Ä¢ Priorize documenta√ß√£o oficial, tutoriais e guias t√©cnicos\n"
        "‚Ä¢ Use termos que direcionem para conte√∫do substantivo\n"
        "‚Ä¢ Varie entre termos espec√≠ficos e gerais\n\n"
        "FORMATO DE RESPOSTA OBRIGAT√ìRIO:\n"
        "1. [termo espec√≠fico t√©cnico]\n"
        "2. [termo de aprendizado/tutorial]\n"
        "3. [termo de documenta√ß√£o]\n"
        "4. [termo de exemplos pr√°ticos]\n"
        "5. [termo de conceitos fundamentais]\n\n"
        "EXEMPLOS DE TERMOS V√ÅLIDOS:\n"
        "‚Ä¢ 'python tutorial b√°sico'\n"
        "‚Ä¢ 'documenta√ß√£o oficial python'\n"
        "‚Ä¢ 'python conceitos fundamentais'\n"
        "‚Ä¢ 'guia python iniciantes'\n\n"
        "USE APENAS portugu√™s brasileiro e seja espec√≠fico para o tema solicitado.",
        max_tokens=400
    )
    
    # Prompt espec√≠fico para gera√ß√£o de termos
    search_prompt = f"""
TEMA SOLICITADO: {search_query}

GERE 5 termos de busca estrat√©gicos que direcionem para:
‚úÖ Documenta√ß√£o oficial e tutoriais educacionais
‚úÖ Guias t√©cnicos e conceitos fundamentais  
‚úÖ Exemplos pr√°ticos e aplica√ß√µes
‚úÖ Recursos de aprendizado confi√°veis

‚ùå EVITE termos que levem a:
‚ùå Sites comerciais ou de venda
‚ùå Marketplaces ou plataformas pagas
‚ùå Conte√∫do promocional ou publicit√°rio

Responda APENAS com a lista numerada dos termos.
"""
    
    log.step("Processando consulta com IA")
    response = term_generator(search_prompt)
    
    # Extrai termos numerados da resposta
    terms = re.findall(r'\d+\.\s*([^\n]+)', response)
    
    # Fallback se n√£o conseguir extrair termos
    if not terms:
        # Extrai qualquer linha que pare√ßa um termo
        lines = [line.strip() for line in response.split('\n') if line.strip()]
        terms = [line for line in lines if len(line) > 5 and not line.startswith(('TEMA', 'GERE', '‚úÖ', '‚ùå'))]
        terms = terms[:5]  # Limita a 5 termos
    
    # Se ainda n√£o tiver termos, usa termos padr√£o baseados na consulta
    if not terms:
        terms = [
            f"{search_query} tutorial",
            f"{search_query} documenta√ß√£o",
            f"{search_query} guia iniciantes",
            f"{search_query} conceitos b√°sicos",
            f"{search_query} exemplos pr√°ticos"
        ]
    
    log.success("Termos de busca gerados:")
    for i, term in enumerate(terms, 1):
        console.print(f"   [bold cyan]{i}.[/bold cyan] [white]{term}[/white]")
    
    return terms


def search(query: str) -> Tuple[List[str], Dict[str, List[str]], Dict[str, Any]]:
    """
    Fun√ß√£o p√∫blica principal para realizar busca completa.
    
    Args:
        query (str): Consulta de busca
        
    Returns:
        Tuple com resultados da busca
    """
    return process_search_query(query)


def summarize_only(topic: str) -> None:
    """
    Cria apenas o resumo de dados j√° coletados usando m√∫ltiplos agentes.
    
    Args:
        topic (str): Tema dos dados j√° coletados
        
    Note:
        O arquivo de dados deve existir no formato: dados_{topic_normalizado}.json
    """
    file_base = normalize_filename(topic)
    data_file = f"dados_{file_base}.json"
    
    if not os.path.exists(data_file):
        log.error(f"Arquivo n√£o encontrado: {data_file}")
        log.info("Execute primeiro uma busca completa para gerar os dados.")
        return
    
    log.info(f"Criando resumo para dados existentes: {topic}")
    create_multi_agent_summary(data_file)


def get_user_choice() -> str:
    """
    Solicita ao usu√°rio que escolha o tema de pesquisa.
    
    Returns:
        str: Tema escolhido pelo usu√°rio
    """
    print_header(
        "SISTEMA INTELIGENTE DE AN√ÅLISE WEB", 
        "An√°lise automatizada com m√∫ltiplos agentes de IA"
    )
    
    # Op√ß√µes sugeridas
    suggested_topics = [
        "Python programa√ß√£o",
        "Machine Learning",
        "Desenvolvimento Web",
        "Intelig√™ncia Artificial",
        "Data Science",
        "DevOps e Cloud",
        "Cybersecurity",
        "Blockchain"
    ]
    
    print_section("ESCOLHA SEU TEMA DE PESQUISA")
    
    # Exibe op√ß√µes sugeridas
    log.info("Temas sugeridos:")
    for i, topic in enumerate(suggested_topics, 1):
        console.print(f"   [bold cyan]{i}.[/bold cyan] [white]{topic}[/white]")
    
    console.print()
    
    # Solicita entrada do usu√°rio
    user_input = prompt_input(
        "Digite o n√∫mero do tema sugerido ou escreva seu pr√≥prio tema",
        default="1"
    ).strip()
    
    # Processa a escolha
    if user_input.isdigit():
        choice_num = int(user_input)
        if 1 <= choice_num <= len(suggested_topics):
            chosen_topic = suggested_topics[choice_num - 1]
            log.success(f"Tema selecionado: {chosen_topic}")
            return chosen_topic
    
    # Se n√£o for um n√∫mero v√°lido, usa como tema customizado
    if user_input and user_input != "1":
        log.success(f"Tema customizado: {user_input}")
        return user_input
    
    # Default
    default_topic = suggested_topics[0]
    log.info(f"Usando tema padr√£o: {default_topic}")
    return default_topic


def show_menu() -> str:
    """
    Exibe menu de op√ß√µes para o usu√°rio.
    
    Returns:
        str: Op√ß√£o escolhida pelo usu√°rio
    """
    print_section("MENU DE OP√á√ïES")
    
    menu_options = [
        "üîç Nova pesquisa completa",
        "üìÑ Gerar resumo de dados existentes",
        "üß™ Executar testes do sistema",
        "‚ùì Ajuda sobre o sistema",
        "üö™ Sair"
    ]
    
    for i, option in enumerate(menu_options, 1):
        console.print(f"   [bold cyan]{i}.[/bold cyan] [white]{option}[/white]")
    
    console.print()
    
    choice = prompt_input("Escolha uma op√ß√£o", default="1").strip()
    
    return choice


def handle_existing_data_summary():
    """Lida com a gera√ß√£o de resumo de dados existentes."""
    print_section("RESUMO DE DADOS EXISTENTES")
    
    # Lista arquivos de dados dispon√≠veis
    data_files = [f for f in os.listdir('.') if f.startswith('dados_') and f.endswith('.json')]
    
    if not data_files:
        log.warning("Nenhum arquivo de dados encontrado.")
        log.info("Execute primeiro uma pesquisa completa para gerar dados.")
        return
    
    log.info("Arquivos de dados dispon√≠veis:")
    for i, file in enumerate(data_files, 1):
        # Extrai o tema do nome do arquivo
        topic = file.replace('dados_', '').replace('.json', '').replace('_', ' ').title()
        console.print(f"   [bold cyan]{i}.[/bold cyan] [white]{topic}[/white] [dim]({file})[/dim]")
    
    console.print()
    
    choice = prompt_input("Escolha o arquivo para gerar resumo", default="1").strip()
    
    if choice.isdigit():
        choice_num = int(choice)
        if 1 <= choice_num <= len(data_files):
            selected_file = data_files[choice_num - 1]
            topic = selected_file.replace('dados_', '').replace('.json', '').replace('_', ' ')
            
            log.info(f"Gerando resumo para: {topic}")
            create_multi_agent_summary(selected_file)
            return
    
    log.error("Escolha inv√°lida.")


def show_help():
    """Exibe ajuda sobre o sistema."""
    print_section("AJUDA DO SISTEMA")
    
    help_content = """
üéØ SOBRE O SISTEMA:
Este √© um sistema inteligente de an√°lise web que usa m√∫ltiplos agentes de IA
para coletar, processar e analisar informa√ß√µes sobre qualquer tema.

üìã FUNCIONALIDADES:
‚Ä¢ Gera√ß√£o autom√°tica de termos de busca otimizados
‚Ä¢ Coleta inteligente de conte√∫do web educacional
‚Ä¢ An√°lise com 4 agentes especializados:
  - Resumidor: Extrai pontos principais
  - Analista: Identifica insights e tend√™ncias
  - Organizador: Estrutura informa√ß√µes
  - Sintetizador: Cria s√≠ntese executiva final

üìÅ ARQUIVOS GERADOS:
‚Ä¢ dados_[tema].json: Dados coletados da web
‚Ä¢ resumos_parciais_[tema].txt: An√°lises por termo
‚Ä¢ sintese_final_[tema].txt: S√≠ntese executiva completa

‚öôÔ∏è  CONFIGURA√á√ÉO NECESS√ÅRIA:
‚Ä¢ Python 3.8+ com depend√™ncias instaladas
‚Ä¢ Chave da API Cohere no arquivo .env
‚Ä¢ Conex√£o com internet para coleta web

üîß SOLU√á√ÉO DE PROBLEMAS:
‚Ä¢ Se houver erro de API: Verifique COHERE_API_KEY no .env
‚Ä¢ Se falhar coleta web: Verifique conex√£o internet
‚Ä¢ Para mais detalhes: Consulte os logs durante execu√ß√£o
"""
    
    console.print(help_content)
    
    input("\nPressione Enter para continuar...")


def main():
    """
    Fun√ß√£o principal do programa com interface interativa.
    """
    try:
        while True:
            choice = show_menu()
            
            if choice == "1":
                # Nova pesquisa completa
                search_query = get_user_choice()
                
                # Confirma antes de prosseguir
                if confirm_action(f"Iniciar pesquisa completa sobre '{search_query}'?"):
                    log.info(f"Iniciando an√°lise completa para: {search_query}")
                    
                    # Executa busca completa
                    terms, pages, data = search(search_query)
                    
                    log.success("Processamento conclu√≠do com sucesso!")
                    console.print("\n[bold green]üìä Estat√≠sticas finais:[/bold green]")
                    console.print(f"   [cyan]‚Ä¢[/cyan] Termos processados: [bold]{len(terms)}[/bold]")
                    console.print(f"   [cyan]‚Ä¢[/cyan] URLs coletadas: [bold]{sum(len(urls) for urls in pages.values())}[/bold]")
                    console.print(f"   [cyan]‚Ä¢[/cyan] An√°lise com m√∫ltiplos agentes: [bold green]Conclu√≠da[/bold green]")
                    
                    # Pergunta se quer continuar
                    if not confirm_action("Deseja fazer outra opera√ß√£o?"):
                        break
                else:
                    log.info("Opera√ß√£o cancelada pelo usu√°rio.")
            
            elif choice == "2":
                # Gerar resumo de dados existentes
                handle_existing_data_summary()
                
                if not confirm_action("Deseja fazer outra opera√ß√£o?"):
                    break
            
            elif choice == "3":
                # Executar testes
                log.info("Executando testes do sistema...")
                try:
                    import subprocess
                    subprocess.run(["python", "test_optimization.py"], check=True)
                except Exception as e:
                    log.error(f"Erro ao executar testes: {e}")
                
                if not confirm_action("Deseja fazer outra opera√ß√£o?"):
                    break
            
            elif choice == "4":
                # Ajuda
                show_help()
            
            elif choice == "5":
                # Sair
                log.info("Encerrando sistema. At√© logo!")
                break
            
            else:
                log.warning("Op√ß√£o inv√°lida. Tente novamente.")
                
    except KeyboardInterrupt:
        log.info("\nSistema interrompido pelo usu√°rio. At√© logo!")
    except Exception as e:
        log.error(f"Erro durante execu√ß√£o: {e}")
        log.info("Verifique a configura√ß√£o da API Cohere no arquivo .env")


if __name__ == "__main__":
    # Para usar apenas resumo de dados existentes, descomente:
    # summarize_only("Python programa√ß√£o")
    
    # Execu√ß√£o padr√£o
    main()


